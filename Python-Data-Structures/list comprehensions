can you please provide code for demonstrations of this
that would be helpful in preparing for 
my career as a deep learning AI SWE?



Would you please evaluate the transcript I provide for its key terms, ideas, 
concepts and their defintions. Would you also please include the video title 
“list comprehensions”, the subsection title "Python Data Structures", 
and the section title "Python Introduction"?

(lively brassy music)
0:04
- [Instructor] Next step, we're gonna talk
0:05
about one of my favorite features in Python,
0:07
something called comprehensions.
0:10
So there isn't really an analog in Java script
0:12
to what I'm about to show you
0:14
unlike most of what we've seen so far.
0:16
We have functions in Python and JavaScript.
0:19
We have variables,
0:20
we've got strings, numbers, lists
0:22
although they're called arrays in Java script.
0:24
We've got key value pairs,
0:26
dictionaries versus objects literals.
0:28
There's a lot of analogous concepts.
0:31
Comprehensions are a bit different.
0:32
They don't really exist in JavaScript
0:35
but they're really useful.
0:36
You'll see them all the time in Python code that is
0:39
and it's just something
0:41
that a lot of people really enjoy about Python.
0:44
So without further ado,
0:45
what are they?
0:46
We're gonna talk
0:47
about a few different types of comprehensions
0:49
but we're gonna start with list comprehensions.
0:52
So list comprehensions are an easy, very succinct syntax
0:56
for creating a list based off of some other iterable.
1:01
In JavaScript, we do this all the time
1:03
using functions like filter and map
1:05
where we take an array
1:06
and we transform it into a new array somehow.
1:09
We double every number
1:10
or we filter out the odd numbers,
1:13
we uppercase every string,
1:14
we capitalize the first letter,
1:16
we sum together a pair,
1:17
whatever we're doing.
1:19
We often use those built-in array methods
1:21
that return copies or new arrays based off
1:24
of an existing array.
1:26
In Python, we do have functions like filter and map.
1:29
However, the easier way,
1:31
the more flexible way of achieving the same end result
1:34
is to use a list comprehension.
1:37
Imagine that we had a list of numbers
1:39
and we wanna do something simple like create a new list
1:42
that only contains the even numbers.
1:44
So if we have nums,
1:46
we'll just add some numbers in here.
1:48
Okay, so here are our numbers
1:51
and I want to create a new list
1:53
that only contains the even numbers
1:55
or the odd numbers.
1:57
Without list comprehensions
1:58
which we haven't seen yet,
2:00
we could do this relatively easily
2:02
with a couple different lines.
2:03
So it would make a new list called evens
2:07
and then we would loop over nums.
2:08
So for n or just num in nums,
2:13
we would check if num % 2 == 0.
2:17
If we want the even numbers,
2:19
then we're going to append it into evens.
2:22
evens.append(num).
2:25
So we loop over all of the nums
2:27
and for each one,
2:28
we check if it's even.
2:29
If it is, we add it into this new evens list.
2:32
So it starts out empty
2:33
and hopefully by the end,
2:34
it has however many things in there.
2:36
Six or seven even numbers.
2:39
Why don't we print evens
2:41
and run this code?
2:43
My file is called comprehensions.py.
2:46
So %run comprehension.py
2:49
and there we go: [2, 4, 6, 8, 10, 12].
2:52
So what we just did is pretty standard stuff.
2:56
We're just looping,
2:56
combining it with a conditional
2:58
and then adding into a list.
3:00
The end goal with all of this code
3:02
is to create a new list based off of this original list.
3:06
In JavaScript, we could do the same thing
3:09
where we write some sort of loop in a conditional
3:11
and then we push on to a new array
3:14
or we could also use a built-in method like nums.filter
3:18
and then add in function for each num
3:23
and then inside of the function body,
3:24
we write our logic to check if the number is even
3:28
but in Python, we have an even simpler and easier way
3:31
which looks like this.
3:34
So we're gonna break this down step-by-step
3:36
but I'm kind of giving you a preview
3:37
of a couple of different components
3:39
of a list comprehension together.
3:42
So right here, what we're doing
3:44
is creating a brand new list.
3:46
That's what those square brackets are
3:48
but we're filling it with content based off of nums.
3:52
So we have a loop in here along with a conditional.
3:56
So, num for num in nums if num is even.
4:03
It seems kind of crazy at first.
4:05
So we're gonna take a step back
4:06
and start with the basics
4:08
but this is the general idea of a list comprehension.
4:10
If I paste this in over here,
4:12
we have our original nums list.
4:14
I paste it in
4:16
and there we go: [2, 4, 6, 8, 10, 12].
4:19
If I were to adjust this
4:21
to instead be [num % 2 == 1],
4:25
well, now it's a misnomer.
4:27
This name shouldn't be evens
4:28
because it's all the odd numbers
4:30
but we're creating a new list all in one go
4:33
and you'll see, once you understand the syntax,
4:36
this is really straightforward
4:37
and very, very common in Python.
4:40
So before we go any further,
4:41
the name comprehension is always something
4:44
that has kind of confused me.
4:46
Why is it called comprehensions
4:49
because the main definition of comprehension that I know
4:52
is to understand something,
4:54
to comprehend something?
4:56
However, I was doing some Googling.
4:58
It looks like there are a couple of different definitions.
5:02
The most common one is the act or action of grasping
5:05
with the intellect.
5:06
But then there's also this definition:
5:08
the act or process of comprising.
5:11
This is kind of just a little tangent anyway
5:13
but according to someone on Stack Overflow,
5:16
this is the definition that is used
5:18
or the meaning of comprehension
5:19
in Python list comprehensions.
5:22
It's based off of some mathematical concepts
5:24
called set comprehension
5:25
and it doesn't really matter.
5:27
Let's take a step back
5:28
and start with a simpler comprehension.
5:31
Instead of adding in a conditional,
5:34
let's just map one list into another list.
5:37
Let's double each number in nums.
5:39
So I'm gonna comment this out
5:42
and to double everything,
5:43
we need to start with our list brackets
5:46
and then we loop.
5:47
We come up with some variable name like num or n
5:51
and then what we need to do
5:52
is specify that we want to double each number
5:57
and pick some variable name like num
6:00
for each num in nums.
6:04
So this part right here is the loop
6:06
for some variable in some collection
6:10
just like we would do here for num in nums
6:13
and then this part right here
6:15
is what we want to add to the list.
6:18
So the equivalent would look something like this:
6:21
new list equals an empty list,
6:24
for num in nums
6:25
new_list.append(num * 2)
6:31
So number times two for each num in nums.
6:34
Same thing here.
6:35
For each num in the nums list,
6:38
we want to double it
6:39
and we don't have to say, "Append,"
6:41
we don't have to reference some variable for the list.
6:44
Instead, we do it all in one go
6:46
and whatever we put here
6:48
will be added into the new list for us.
6:50
If I just copy this over,
6:52
paste it in,
6:54
there we go, we've doubled every number.
6:56
Now we're not changing the original nums.
6:58
We're simply creating a new list
7:00
based off of that original nums list.
7:03
If we instead did something like if I duplicate this,
7:07
instead of num * 2,
7:08
I just did ['HIIIII for num in nums],
7:12
we're going to end up with a large list
7:15
where it has the same length as our nums list
7:18
but every element is just going to be the string 'HIIIII'
7:22
(keyboard keys clang)
7:23
and there we go.
7:26
So the basic syntax [],
7:28
and then what we want to add,
7:31
let's just go with what_to_add
7:33
and then for thing in list.
7:38
So I'll go with [what_to_append for thing in list]
7:42
and this will make us a new list.
7:44
So let's do a couple more examples here.
7:47
If you're typing along with me,
7:48
here's a quick little exercise.
7:51
Let's take some list of numbers.
7:53
We'll just do a,
7:55
how about [2, 4, 6, 8].
7:58
And I want a new list where every number has been squared.
8:02
So we would end up with what?
8:03
Four, 16, 36, right?
8:07
And then 64.
8:09
So doing that with a list comprehension
8:11
would look like this.
8:12
We'll go with evens.
8:14
I already have evens up here.
8:16
How about just,
8:17
I guess we'll go with numbers
8:19
or actually let's not even use a variable at all
8:22
and let's just do it in line
8:24
and we'll work exactly the same way.
8:26
So we need to come up with some variable name
8:28
for n in this list [2, 4, 6, 8].
8:33
We're just doing it in line
8:34
instead of referencing a variable name,
8:35
like numbers or nums for each thing.
8:38
We want n * n
8:41
or we could do n ** 2.
8:44
I'll just do n * n just like that.
8:48
So loop over this list,
8:50
make a new list
8:51
and for each n in this list,
8:53
we want to square it
8:54
and add to the new list.
8:56
So let's verify that it works.
8:59
There we go: [4, 16, 36, 64].
9:03
We also can create lists based off of other structures,
9:07
things that are not lists.
9:09
For example, a string.
9:11
So I could take every letter in a string.
9:14
Let's take this string of 'lmfao'
9:18
and then create a new list based off of it.
9:21
So for each character in 'lmfao,'
9:25
why don't we just take the character as it is?
9:29
So we'll split it into a new string.
9:31
Usually you wouldn't do this
9:32
because there are other ways
9:33
of creating a list based off of a string
9:36
but you can
9:37
and we end up with ['l', 'm', 'f', 'a', 'o'].
9:40
I could uppercase [char.upper]
9:45
and now we're creating this right here:
9:49
['L', 'M', 'F', 'A', 'O'] in all caps.
9:52
I could also get fancier
9:53
and add a period.
9:55
So something like this.
9:58
Concatenate it.
9:59
I need to copy it
10:01
(keyboard keys clang)
10:02
and there we go: L period, M period, F period and so on.
10:07
So we're taking a string
10:09
and iterating over it
10:10
and creating a new list.
10:12
So the list comprehension,
10:14
the list part in that name
10:16
does not mean we only iterate over a list.
10:19
All that it refers to is the fact
10:21
that we're creating a new list.
10:23
So this creates a list,
10:24
this creates a list
10:25
and this creates a list.
10:27
Although these are based off of a list,
10:29
this one's based off of a string.
10:32
We could also use a range.
10:34
So instead of generating these numbers myself,
10:36
I could create a range.
10:38
Let's go with how about from 10 to 20.
10:44
And then turn that into a list if I want to.
10:47
(keyboard keys clang)
10:48
Let's do num for num in range.
10:53
So we'll iterate over that range
10:54
and for each thing in that range, each number,
10:57
we'll add it into a new list.
11:00
And there we go: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19].
11:04
I could double each number.
11:05
I could square each number.
11:06
I could divide each number by two.
11:08
Sure.
11:09
(keyboard keys clang)
11:11
For we are essentially recreating JavaScript's map
11:15
but it's a nicer, shorter syntax.
11:17
And like I said,
11:18
these are used all over the place in Python.
11:20
It's not just a nice little quirk kind of a cool thing
11:23
to know about in Python.
11:24
It's actually used everywhere.
11:26
So you will see them
11:27
which is why we're learning them.
11:29
So this is just one use case.
11:31
We're mapping every value from one list
11:35
or one string
11:36
or one range is being added in some way
11:39
or is being used to create a new list.
11:42
So if we have 10 items
11:43
or whatever the original list is,
11:46
there's always going to be 10 in this new list.
11:48
There's always going to be 10 elements in this one.
11:51
But next, I'm gonna show you
11:52
that we can also in conditional logic
11:54
so that we can get closer to JavaScript's filter
11:57
where we can filter a specific group of elements
12:00
out of a list to create a new list.
12:01
So that's next.
12:02
(lively brassy music)