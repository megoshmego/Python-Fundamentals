can you please provide code for demonstrations of this
that would be helpful in preparing for 
my career as a deep learning AI SWE?



Would you please evaluate the transcript I provide for its key terms, ideas, 
concepts and their defintions. Would you also please include the video title 
“list methods”, the subsection title "Python Data Structures", 
and the section title "Python Introduction"?

0:14
by running dir on list
0:17
or on a particular instance of a list and there's a bunch
0:21
of these double underscored dander things
0:24
I'm not gonna talk about for now
0:25
and then down at the bottom,
0:27
there's a relatively small group of built-in methods.
0:30
And we're gonna talk about them in this video.
0:33
So this is one of the biggest differences between JavaScript
0:35
and Python and really any other language.
0:38
You just have to learn the new names
0:40
or the different names of methods.
0:42
So there is a way of adding something to a list
0:44
and removing something and sorting
0:47
and copying just like we have in JavaScript.
0:49
But the names of the methods are different,
0:52
and that's pretty common across different languages.
0:54
You will have to pick up those new names,
0:56
but as far as the concepts,
0:58
there's nothing here that is revolutionary
1:01
or that different from Javascript.
1:04
It's really just re-skinned or under a different name.
1:07
So let's start with append.
1:09
Append is a way to add something to the end of a list.
1:13
So let's make a new list, I'm gonna call this chickens
1:16
and I'll put my chickens in there.
1:17
So I've got butters, I've got lady gray
1:21
and I have stevie chicks, stevie nicks, stevie chicks, yeah.
1:28
Okay, so there's chickens, it's three elements long.
1:31
We could always verify that
1:32
with len of chickens and we get three.
1:38
To add something into the end of the array
1:42
we do chickens.append, whereas in JavaScript,
1:44
we would push on, well, push is not a thing in Python
1:48
and we get an error saying, list object
1:51
has no attribute push.
1:52
So we need to do chickens.append
1:55
and then we pass in some element to add.
1:58
So I have another chicken named henry.
2:01
Sadly henry passed away, very sad.
2:05
But if we look at chickens, now we have henry at the end.
2:10
So append is used to append to the end of a list.
2:14
And if you ever wanna learn more about it,
2:16
we can do help list.append and now there's not much,
2:21
it just says append object to the end of the list.
2:23
That's pretty much it.
2:25
It's pretty simple, if you try and pass in multiple things
2:28
like a henrietta and junior another one of my chickens.
2:35
Append takes exactly one argument,
2:38
we gave two, Python is not happy, and that's append.
2:43
Next we have copy, copy we'll return a copy of a list.
2:48
So just like in Javascript
2:50
we've actually seen this already, lists are reference types.
2:54
So if I make a copy of chickens, I'll call this copy_flock.
3:00
This is not going to be a copy at first
3:02
if I just set it to chickens,
3:04
they are now referencing the exact same list.
3:06
And if I change something in the copy, copy_flock.append,
3:10
some new chicken, how about lucy,
3:15
now we can see that copy_flock
3:18
now has lucy as does chickens.
3:21
So I did not make a copy of the entire list.
3:24
I simply made a variable that references
3:26
the exact same list.
3:28
If I wanted a separate list,
3:30
I could do copy_flock equals and then chickens.copy.
3:37
Now it will look the same of course,
3:40
but if I try doing copy_flock is chickens we now get false.
3:49
Is is the operator that is going to check identity
3:53
to see if they have the same reference and they don't,
3:56
but they should double equals each other at this point
4:00
because they have the same contents.
4:02
Now let's add something to chickens one more time.
4:04
Chicken.append, lucy how about romeo.
4:12
Now chickens has romeo at the end, but copy_flock does not.
4:17
So copy is only going to make a shallow copy.
4:20
So if we have nested structures, just like in JavaScript,
4:24
when we create a copy of an array,
4:26
any nested data structures are not going to be cloned
4:29
or copied, the references will remain the same.
4:31
It's exactly the same in Python, if I had nested lists here,
4:36
those lists would not be copied.
4:38
We would have the same reference only the highest level,
4:41
the top level list is actually cloned or copied.
4:45
Next step up we have count.
4:47
Count we'll tell you how many times
4:49
certain elements appears in a list.
4:52
So right now I only have one instance
4:55
of everything in my list.
4:56
If I look at chickens and I do dot count of butters,
5:01
there's only one butters.
5:03
If I append butters again, and I run the same line,
5:09
chicken.count butters, I now get two,
5:12
if I try and find the count of something
5:13
that is not in there, like that, we get zero.
5:17
So it's not an error,
5:18
it just tells us that our count is zero times in that list.
5:23
Next up we have extend.
5:25
Extend will take elements from one list.
5:27
So let's make a new list.
5:28
My baby chicks that I've just hatched,
5:31
I'm getting ready to incorporate them with the main flock.
5:34
What are my chicks going to be named,
5:36
herbert and how about and how about annabelle, sure.
5:44
Okay, so I have two chicks
5:45
and if I want to add those into the chickens list,
5:48
I can use chickens.extend and then pass in chicks.
5:54
And if we look at chicks, it's unchanged,
5:57
it still there, it's all fine.
5:58
But if I look at chickens,
6:00
we now have herbert and annabelle added to the end.
6:04
And if we look at help list.extend
6:09
tells us exactly how it works,
6:10
extend list by appending elements from the Iterable.
6:14
So it's going to iterate over whatever we pass in,
6:17
which means I don't think I've ever done this,
6:19
but it should work.
6:21
If I were to pass it in something like hello like that.
6:27
And we look at chickens,
6:29
it iterates over the string and adds each element,
6:32
each character in that string, as an element to the list.
6:35
And I already regret doing that
6:37
because now I've just ruined the sanctity
6:40
of my chicken flock.
6:43
What else? We have index,
6:45
this is like index of in JavaScript.
6:47
It returns the index of some elements
6:50
in the list L if it's found.
6:53
So I can tell that a certain value is in chickens
6:56
using the in operator.
6:57
So I could do henry in chickens
7:01
and it doesn't tell me where,
7:02
it just tells me, yeah, that's true, it's in there.
7:05
And if I want to figure out where,
7:07
I can do chickens.index henry,
7:12
and I get index of three zero, one, two, three,
7:15
that's correct, could verify by doing that.
7:19
If we have more than one element that are the same,
7:22
for example, we have two Ls in here.
7:25
If I do chickens dot index of L
7:30
and I pay attention to capitalization,
7:33
it needs to be an uppercase L, do that one more time.
7:37
It only gives me the first matching index,
7:39
just like index seven JavaScript zero, one, two three,
7:43
four, five, six, seven, eight, nine, ten, eleven,
7:46
so it doesn't give me 12.
7:48
Also you probably noticed this already.
7:51
If we look for something that is not
7:52
in the list, chickens.index of Chuck, we get an error.
7:58
Chuck is not in list, so it doesn't return negative one.
8:03
Like it was, like it does in JavaScript
8:06
and well, negative one doesn't make sense
8:08
because the index of a list at negative one in Python
8:11
is going to be the last element,
8:13
but I guess it could return none or false or something,
8:16
but instead it raises a value error
8:18
if the value is not present.
8:20
So just watch out for that.
8:22
We'll learn how to check for errors and anticipate errors
8:25
and try things just like we do in Java script.
8:28
But also you can just combine index with the in operator.
8:32
So check if something is in a list before you try
8:35
and find the index.
8:37
Next up, we have insert.
8:39
Insert is going to add an elements
8:42
into a list at a particular index.
8:45
And the index is actually the first argument we specify.
8:48
And then the specific element we want to add
8:50
is the second argument.
8:52
So if I wanted to add something at the beginning
8:54
of my chickens list,
8:57
I could do chickens.insert
9:01
and then pass in an index of zero,
9:03
and then what do I want to add in?
9:04
We've got butters, stevie, how about tina, just like that.
9:13
And if we look at chickens, now tina is at index of zero,
9:17
it did not replace butters.
9:19
Everything was shifted down
9:21
or shifted to the right, I guess.
9:23
So tina is now index zero and our list now has a length
9:28
of one more than whatever it was before.
9:31
I could also do chicken.insert and insert somewhere else,
9:37
like index of nine and pass in some element,
9:41
I could do something other than a string
9:44
like I've been doing, I could have a list if I wanted to.
9:47
So we'll do another list and this list
9:50
will be some, maybe a sub flock of chickens.
9:53
So we'll have harry and hermione,
9:59
so pretty sure it's like that.
10:01
Anyway, I've now inserted something at index of nine.
10:04
It just happens to be another list.
10:08
Next up we have pop,
10:09
now pop is something that has an analog in JavaScript,
10:13
the same name and array method pop in Python.
10:15
It's a list method pop, but they work a bit differently,
10:19
if we don't pass it an argument to pop,
10:21
it works just like JavaScripts pop.
10:23
So if I do chicken.pop, not poop, but pop, we get O,
10:28
it's returned to me, and if we look at chickens,
10:31
it now no longer has O at the end.
10:33
So this is just like JavaScript, pop off the last element.
10:38
However, where it differs
10:39
is that I can also pass in an index,
10:42
and it becomes more of all purpose remove at this index.
10:46
And it's a special case if we don't pass something in,
10:49
the default will be the last element, the last index,
10:52
but I could also say pop the zero with item,
10:55
which right now is tina, I'm sorry, tina,
10:58
we're sending you to the slaughterhouse.
10:59
I don't slaughter my chickens by the way,
11:01
they're only egg chickens, I promise.
11:04
And now tina is gone.
11:06
If I wanted to remove this list, what does that index?
11:09
Zero, one, two, three, four, five, six, seven, eight,
11:13
chickens.pop at index eight.
11:16
That list, the entire element is returned to me
11:19
and now chickens no longer has that list
11:22
with harry and hermione in it.
11:25
We have reverse, which is going to reverse a list in place.
11:29
So it doesn't return a copy of the list.
11:31
If I do chickens.reverse.
11:35
Notice it goes from butters down to annabelle.
11:38
Now, if we look at chickens, nothing was returned,
11:42
but chickens itself has been reversed.
11:44
Annabelle is first, then Herbert, then butter.
11:46
So I have two butters, I forgot about that,
11:49
but you can see the order is reversed,
11:51
annabel, herbert, butters, romeo,
11:53
and same thing here in the opposite direction.
11:56
I could reverse it again and now we're back to normal.
12:01
And then lastly we have sort,
12:03
now sort is going to sort a list in place,
12:07
but it can be a bit finicky if we do help list.sort.
12:12
And we read about how it works, we can specify a key,
12:16
we won't go into that.
12:17
We can specify reverse and set that to be true,
12:20
it defaults to false and it sorts in place.
12:24
If I do chickens.sort, and we look at chickens,
12:28
we don't get a return value,
12:29
but chickens has been sorted alphabetically
12:32
because everything is a string.
12:34
If we have a list of numbers,
12:36
numbs equals 45, 62 33, 12, 1, -9, -99, o