Would you please evaluate the transcript I provide for its key terms, ideas, concepts and their defintions. Would you also please include the video title “Running files”, the subsection title "Python Introduction", and the section title "Python Fundamentals"?

(upbeat music)
0:04
- [Instructor] Next step,
0:05
let's talk about running our code from a file.
0:07
So, instead of writing everything in IPython in line,
0:11
which is just a great way to learn
0:13
at least simple things and play around.
0:15
We usually wanna write some code in an external file,
0:19
if not multiple files.
0:20
Like when we get to creating servers and applications,
0:24
we write code in a file
0:25
and then we need to execute it as Python.
0:28
With JavaScript, all that we do is write code in a JS file,
0:32
include that as a script in an HTML file,
0:35
open that up in the browser.
0:36
With Python, it's a bit different,
0:38
there is no browser for Python,
0:40
we need to execute it manually
0:42
and we can do that two different ways.
0:45
I'm gonna at least show you two different ways.
0:47
The first is to execute it using Python 3,
0:51
just straight from the command line,
0:53
Python 3, and then the name of your file,
0:56
or the path to your file.
0:58
So I'm in a directory right now
0:59
with the file I made called bouncer.py.
1:03
It doesn't have anything in it.
1:04
If I did something simple like print,
1:06
"You cannot come in,"
1:10
and I save,
1:11
this is valid Python.
1:13
It is a .py file, that's important.
1:16
And then if I execute it,
1:18
Python 3, that file name,
1:21
python 3 bouncer.py.
1:25
It executes my code, it prints out,
1:28
"You cannot come in."
1:29
It would run whatever code I had in here,
1:31
hundreds or thousands of lines.
1:33
And then it takes me back to my steele, to my terminal.
1:36
So I'm not in, IPython.
1:38
I can't interact with that code.
1:40
It just executes it,
1:41
and then we're done.
1:43
So to summarize those steps, it runs Python,
1:45
it loads this file.
1:47
It executes the code from my bouncer.py file.
1:51
It returns us to the terminal when it's done.
1:54
Alternatively, if you want to inspect some stuff
1:57
in your code, figure out what's going on,
1:59
or you're just like using IPython?
2:01
You can use this command,
2:02
%run, and then the name of a file.
2:07
So why did I add some more code in here?
2:09
We'll do something like age is 19 and guests equals zero.
2:14
And then we'll just check
2:15
if age is greater than 18,
2:19
greater than, or equal to 18,
2:21
we will print,
2:24
"You can come in,"
2:25
and we'll add one to guests.
2:28
So guests plus equals one.
2:32
Okay?
2:33
So two different things that we're doing,
2:34
we're printing out,
2:35
"You can come in."
2:36
We're adding one to the guests in our club
2:38
if this is a bouncer file.
2:40
Now, if I run this in, IPython,
2:45
%run, and then the name of the file,
2:49
bouncer.py,
2:52
it runs our code and we get that print,
2:55
"You can come in."
2:56
But I also have access to my variables, like age.
2:59
I can look at guests,
3:01
and it reflects the current state
3:04
of those variables after this code ran.
3:07
So if something went wrong,
3:08
if I wanted to debug and figure out
3:10
why is this thing not printing out the work,
3:13
the value I expect
3:14
or what is the current value of guests?
3:16
This is very simple obviously,
3:17
but in more complicated applications,
3:20
this is a pretty useful feature
3:22
to be able to run a file from within IPython
3:25
and then inspect and interact with the code after the fact.
3:28
Okay. So two different options,
3:30
both of them are going to run your code.
3:32
Both of them will do the exact same thing.
3:35
It's just really about what happens afterwards
3:37
and the actual command that you use to run it.
3:39
So Python 3, a file name,
3:42
you run that from the terminal.
3:44
It will run your code
3:45
and then take you back to terminal end.
3:47
If you use this %run mygame.py or bouncer.py
3:51
some file inside of IPython,
3:54
it will run the code,
3:55
but then it stays in IPython
3:56
and we still have access to those variables.
3:59
Okay. So now we're going back
4:01
to our regularly scheduled programming.
4:03
We're gonna pick up with conditionals
4:04
and talk more about the different components
4:07
of a conditional statement
4:08
if an LCF unveils in all that stuff.
4:11
(upbeat music)